/*
 * =====================================================================================
 *
 *       Filename:  kdtree.c
 *
 *    Description:  KD-Tree 
 *
 *        Version:  1.0
 *        Created:  19/09/21 07:51:31 PM IST
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  PARTHAJIT ROY (PR), roy.parthajit@gmail.com
 *   Organization:  The University of Burdwan
 *
 * =====================================================================================
 */


#include "kdtree.h"
#define KDTREE_DIM (3)
struct kdt_node{
      void*  object;
      struct kdt_node* left;
      struct kdt_node* right;
};



void kdtree_init(struct kdtree* tree, void* objs, int node_size, int size, int (*comparator)(void*, void*, int), double (*value_at)(void*, int), double (*pfdist2)(void*, void*))
{
      tree->nodes = (struct kdt_node*) malloc ( size * sizeof(struct kdt_node) );
      if ( tree->nodes==NULL ) {
	    fprintf ( stderr, "\ndynamic memory allocation failed in function %s()\n" , __func__);
	    exit (EXIT_FAILURE);
      }


      tree->node_size = node_size;
      tree->size = size;
      tree->value_at = value_at;
      tree->objcmp = comparator;
      tree->pfdist2 = pfdist2;
      for(int i=0; i<size; ++i){
	    tree->nodes[i].object = objs + i * node_size;
	    tree->nodes[i].left = NULL;
	    tree->nodes[i].right= NULL;
      }
}


void kdtree_free(struct kdtree* tree){
      free(tree->nodes);
      tree->nodes = NULL;
}

static void swap(struct kdt_node* n1, struct kdt_node* n2, int size)
{
      void* tmp = NULL;// = malloc(size * sizeof(char));

      tmp = n1->object;
      n1->object = n2->object;
      n2->object = tmp;
//      memcpy(tmp, n1->object, sizeof(void*));
//      memcpy(n1->object, n2->object, sizeof(void*));
//      memcpy(n2->object, tmp, sizeof(void*));
//      memcpy(tmp, n1->object, size);
//      memcpy(n1->object, n2->object, size);
//      memcpy(n2->object, tmp, size);

//      free(tmp);
//      void* tmp = n1->object;
//      n1->object = n2 ->object;
//      n2->object = tmp;
}
//int atom_cmp(void* a, void* b, int index)
//{
//      atom_t* atm1 = (atom_t*) a;
//      atom_t* atm2 = (atom_t*) b;
//      if(index == 0){
//	    if(atm1->center->x > atm2->center->x) return 1;
//	    else if(atm1->center->x < atm2->center->x) return -1;
//	    else return 0;
//      }else if(index == 1){
//	    if(atm1->center->y > atm2->center->y) return 1;
//	    else if(atm1->center->y < atm2->cenyer->y) return -1;
//	    else return 0;
//      }else {
//	    if(atm1->center.z > atm2->center.z) return 1;
//	    else if(atm1->center->z < atm2->center->z) return -1;
//	    else return 0;
//      }
//
//}
static struct kdt_node* find_median(struct kdt_node* start, struct kdt_node* end, int node_size, int index, int (*objcmp) (void*, void*, int))
{
      if(end <= start) return NULL;
      if(end == start + 1) return start;
      struct kdt_node *store;
      struct kdt_node* mid = start + (end - start) / 2;
      struct kdt_node* pivot;
      while (1) {
	    pivot = mid;

	    
	    swap(mid, end - 1, node_size);
	    store = start;
	    for (struct kdt_node* p=start; p<end; p++) {
		  if(objcmp(p->object, pivot->object, index) == -1) {
			if (p != store){
			      swap(p, store, node_size);
			}
			store++;
		  }
	    }
	    swap(store, end - 1, node_size);

	    /* median has duplicate values */
	    if (objcmp(store->object, mid->object, index) == 0){
		  return mid;
	    }
	    if (store > mid) end = store;
	    else        start = store;
      }
}

static struct kdt_node* kdt_make(struct kdt_node* base, int node_size, int len, int i, int (*objcmp) (void*, void*, int))
{
      if(len == 0) return NULL;
      struct kdt_node* median = find_median(base, base+len, node_size, i, objcmp);
      if(base != NULL){
	    i = (i + 1) % KDTREE_DIM; // 3 is the dimension of data. it is 3d point.
	    median->left  = kdt_make(base, node_size, median - base, i, objcmp);
	    median->right = kdt_make(median+1, node_size, base + len - (median + 1), i, objcmp);
      }
      return median;

}

void kdtree_build(struct kdtree* tree)
{
      kdt_make(tree->nodes, tree->node_size, tree->size, 0, tree->objcmp);

      

}
static void kdt_node_neighbor(struct kdt_node* node, void* object, int i, double range_sqr, void* neighbors, int* count, double(*pfdist2)(void*, void*), double(value_at)(void*, int))
{

      
      if(node == NULL) return;

      
      double dist2 = pfdist2(node->object, object);
      double delta = value_at(node->object, i) - value_at(object, i);
      double delta2 = delta * delta;
      if(dist2 <= range_sqr){
	    struct residue* res = (struct residue*)node->object;
	    print_pdb_line(stdout, res->atoms);
	    memcpy(neighbors + (*count) * sizeof(void*), node->object, sizeof(void*));
	    res = (struct residue*)(neighbors + (*count) * sizeof(void*));
	    printf("Aderekd = %p\n", res);
	    print_pdb_line(stdout, res->atoms);
//	    neighbors +(  *count) = node;
	    *count = *count + 1;
	    i = (i + 1) % KDTREE_DIM;
	    kdt_node_neighbor(delta > 0.0 ? node->left : node->right, object, i, range_sqr,  neighbors, count, pfdist2, value_at);
	    if(delta2 > range_sqr) return;
	    kdt_node_neighbor(delta > 0.0 ? node->right : node->left, object, i, range_sqr,  neighbors, count, pfdist2, value_at);
      }
}
void kdtree_neighbors(void* neighbors[], int* count, struct kdtree* tree, void* obj, double range_sqr)
{
      *count = 0;

      
      kdt_node_neighbor(tree->nodes, obj, 0, range_sqr, neighbors, count, tree->pfdist2, tree->value_at);
}
